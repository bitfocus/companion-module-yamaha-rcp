"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.from15to32Keys = exports.splitRgb = exports.combineRgb = exports.assertNever = exports.literal = void 0;
/**
 * Assert a certain type for a literal.
 * This can be used to correctly type parts of an object in TypeScript.
 *
 * ### Example
 *  ```ts
 * {
 *  [ActionId.MyAction]: literal<CompanionActionDefinition>({
 *   name: 'My Action',
 *   // ...
 *  })
 * }
 * ```
 *
 * instead of this
 * ```ts
 * {
 *  [ActionId.MyAction]: {
 *   name: 'My Action',
 *   // ...
 *  }
 * }
 * ```
 */
function literal(v) {
    return v;
}
exports.literal = literal;
/** Type assert that a value is never */
function assertNever(_val) {
    // Nothing to do
}
exports.assertNever = assertNever;
/**
 * Combine separate RGB component to one single value to be used in feedback styles
 *
 * ### Example
 *
 * ```js
 * defaultStyle: {
 *  bgcolor: combineRgb(255, 0, 0),
 *  color: combineRgb(255, 255, 255),
 * }
 * ```
 */
function combineRgb(r, g, b) {
    return ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
}
exports.combineRgb = combineRgb;
/**
 * Split a combined color value to separate RGB component values
 */
function splitRgb(dec) {
    return {
        r: (dec & 0xff0000) >> 16,
        g: (dec & 0x00ff00) >> 8,
        b: dec & 0x0000ff,
    };
}
exports.splitRgb = splitRgb;
function from15to32Keys(key) {
    key = key - 1;
    let rows = Math.floor(key / 5);
    let col = (key % 5) + 1;
    let res = rows * 8 + col;
    if (res >= 32) {
        //debug('from15to32: assert: old config had bigger pages than expected')
        return 31;
    }
    return res;
}
exports.from15to32Keys = from15to32Keys;
//# sourceMappingURL=util.js.map