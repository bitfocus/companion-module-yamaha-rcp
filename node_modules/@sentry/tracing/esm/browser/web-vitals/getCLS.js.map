{"version":3,"file":"getCLS.js","sources":["../../../../../src/browser/web-vitals/getCLS.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { CLSMetric, ReportCallback, ReportOpts } from './types';\n\n/**\n * Calculates the [CLS](https://web.dev/cls/) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/cls/#layout-shift-score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a pageâ€”including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onCLS = (onReport: ReportCallback, opts: ReportOpts = {}): void => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  // const handleEntries = (entries: Metric['entries']) => {\n  const handleEntries = (entries: LayoutShift[]): void => {\n    entries.forEach(entry => {\n      // Only count layout shifts without recent user input.\n      if (!entry.hadRecentInput) {\n        const firstSessionEntry = sessionEntries[0];\n        const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n        // If the entry occurred less than 1 second after the previous entry and\n        // less than 5 seconds after the first entry in the session, include the\n        // entry in the current session. Otherwise, start a new session.\n        if (\n          sessionValue &&\n          sessionEntries.length !== 0 &&\n          entry.startTime - lastSessionEntry.startTime < 1000 &&\n          entry.startTime - firstSessionEntry.startTime < 5000\n        ) {\n          sessionValue += entry.value;\n          sessionEntries.push(entry);\n        } else {\n          sessionValue = entry.value;\n          sessionEntries = [entry];\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (sessionValue > metric.value) {\n          metric.value = sessionValue;\n          metric.entries = sessionEntries;\n          if (report) {\n            report();\n          }\n        }\n      }\n    });\n  };\n\n  const po = observe('layout-shift', handleEntries);\n  if (po) {\n    report = bindReporter(onReport, metric, opts.reportAllChanges);\n\n    onHidden(() => {\n      handleEntries(po.takeRecords() as CLSMetric['entries']);\n      report(true);\n    });\n  }\n};\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,KAAA,GAAA,CAAA,QAAA,EAAA,IAAA,GAAA,EAAA,KAAA;AACA,EAAA,MAAA,MAAA,GAAA,UAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA;AACA,EAAA,IAAA,MAAA,CAAA;AACA;AACA,EAAA,IAAA,YAAA,GAAA,CAAA,CAAA;AACA,EAAA,IAAA,cAAA,GAAA,EAAA,CAAA;AACA;AACA;AACA,EAAA,MAAA,aAAA,GAAA,CAAA,OAAA,KAAA;AACA,IAAA,OAAA,CAAA,OAAA,CAAA,KAAA,IAAA;AACA;AACA,MAAA,IAAA,CAAA,KAAA,CAAA,cAAA,EAAA;AACA,QAAA,MAAA,iBAAA,GAAA,cAAA,CAAA,CAAA,CAAA,CAAA;AACA,QAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA;AACA;AACA,QAAA;AACA,UAAA,YAAA;AACA,UAAA,cAAA,CAAA,MAAA,KAAA,CAAA;AACA,UAAA,KAAA,CAAA,SAAA,GAAA,gBAAA,CAAA,SAAA,GAAA,IAAA;AACA,UAAA,KAAA,CAAA,SAAA,GAAA,iBAAA,CAAA,SAAA,GAAA,IAAA;AACA,UAAA;AACA,UAAA,YAAA,IAAA,KAAA,CAAA,KAAA,CAAA;AACA,UAAA,cAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;AACA,SAAA,MAAA;AACA,UAAA,YAAA,GAAA,KAAA,CAAA,KAAA,CAAA;AACA,UAAA,cAAA,GAAA,CAAA,KAAA,CAAA,CAAA;AACA,SAAA;AACA;AACA;AACA;AACA,QAAA,IAAA,YAAA,GAAA,MAAA,CAAA,KAAA,EAAA;AACA,UAAA,MAAA,CAAA,KAAA,GAAA,YAAA,CAAA;AACA,UAAA,MAAA,CAAA,OAAA,GAAA,cAAA,CAAA;AACA,UAAA,IAAA,MAAA,EAAA;AACA,YAAA,MAAA,EAAA,CAAA;AACA,WAAA;AACA,SAAA;AACA,OAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,MAAA,EAAA,GAAA,OAAA,CAAA,cAAA,EAAA,aAAA,CAAA,CAAA;AACA,EAAA,IAAA,EAAA,EAAA;AACA,IAAA,MAAA,GAAA,YAAA,CAAA,QAAA,EAAA,MAAA,EAAA,IAAA,CAAA,gBAAA,CAAA,CAAA;AACA;AACA,IAAA,QAAA,CAAA,MAAA;AACA,MAAA,aAAA,CAAA,EAAA,CAAA,WAAA,EAAA,EAAA,CAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA;AACA;;;;"}