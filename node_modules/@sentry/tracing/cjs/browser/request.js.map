{"version":3,"file":"request.js","sources":["../../../../src/browser/request.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { DynamicSamplingContext, Span } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  BAGGAGE_HEADER_NAME,\n  dynamicSamplingContextToSentryBaggageHeader,\n  isInstanceOf,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\n\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\n\nexport const DEFAULT_TRACE_PROPAGATION_TARGETS = ['localhost', /^\\//];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * @deprecated Will be removed in v8.\n   * Use `shouldCreateSpanForRequest` to control span creation and `tracePropagationTargets` to control\n   * trace header attachment.\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * List of strings and/or regexes used to determine which outgoing requests will have `sentry-trace` and `baggage`\n   * headers attached.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACE_PROPAGATION_TARGETS}\n   */\n  tracePropagationTargets: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * Default: (url: string) => true\n   */\n  shouldCreateSpanForRequest?(url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n  error?: unknown;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    __sentry_xhr__?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    getRequestHeader?: (key: string) => string;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string | undefined>\n  | Array<[string, string]>\n  // the below is not preicsely the Header type used in Request, but it'll pass duck-typing\n  | {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      append: (key: string, value: string) => void;\n      get: (key: string) => string;\n    };\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  // TODO (v8): Remove this property\n  tracingOrigins: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  tracePropagationTargets: DEFAULT_TRACE_PROPAGATION_TARGETS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line deprecation/deprecation\n  const { traceFetch, traceXHR, tracePropagationTargets, tracingOrigins, shouldCreateSpanForRequest } = {\n    traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n    traceXHR: defaultRequestInstrumentationOptions.traceXHR,\n    ..._options,\n  };\n\n  const shouldCreateSpan =\n    typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : (_: string) => true;\n\n  // TODO(v8) Remove tracingOrigins here\n  // The only reason we're passing it in here is because this instrumentOutgoingRequests function is publicly exported\n  // and we don't want to break the API. We can remove it in v8.\n  const shouldAttachHeadersWithTargets = (url: string): boolean =>\n    shouldAttachHeaders(url, tracePropagationTargets || tracingOrigins);\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', (handlerData: FetchData) => {\n      fetchCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', (handlerData: XHRData) => {\n      xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n    });\n  }\n}\n\n/**\n * A function that determines whether to attach tracing headers to a request.\n * This was extracted from `instrumentOutgoingRequests` to make it easier to test shouldAttachHeaders.\n * We only export this fuction for testing purposes.\n */\nexport function shouldAttachHeaders(url: string, tracePropagationTargets: (string | RegExp)[] | undefined): boolean {\n  return stringMatchesSomePattern(url, tracePropagationTargets || DEFAULT_TRACE_PROPAGATION_TARGETS);\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request: string | Request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options: { [key: string]: any } = handlerData.args[1];\n\n    if (shouldAttachHeaders(handlerData.fetchData.url)) {\n      options.headers = addTracingHeadersToFetchRequest(\n        request,\n        activeTransaction.getDynamicSamplingContext(),\n        span,\n        options,\n      );\n\n      activeTransaction.metadata.propagations += 1;\n    }\n  }\n}\n\nfunction addTracingHeadersToFetchRequest(\n  request: string | Request,\n  dynamicSamplingContext: Partial<DynamicSamplingContext>,\n  span: Span,\n  options: {\n    headers?:\n      | {\n          [key: string]: string[] | string | undefined;\n        }\n      | Request['headers'];\n  },\n): PolymorphicRequestHeaders {\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n  const sentryTraceHeader = span.toTraceparent();\n\n  const headers =\n    typeof Request !== 'undefined' && isInstanceOf(request, Request) ? (request as Request).headers : options.headers;\n\n  if (!headers) {\n    return { 'sentry-trace': sentryTraceHeader, baggage: sentryBaggageHeader };\n  } else if (typeof Headers !== 'undefined' && isInstanceOf(headers, Headers)) {\n    const newHeaders = new Headers(headers as Headers);\n\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n\n    if (sentryBaggageHeader) {\n      // If the same header is appended miultiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];\n\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push([BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n\n    return newHeaders;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    const newBaggageHeaders: string[] = [];\n\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push(...existingBaggageHeader);\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n\n    return {\n      ...(headers as Exclude<typeof headers, Headers>),\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (\n    !hasTracingEnabled() ||\n    (handlerData.xhr && handlerData.xhr.__sentry_own_request__) ||\n    !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))\n  ) {\n    return;\n  }\n\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  // if not, create a new span to track it\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...xhr.data,\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url,\n      },\n      description: `${xhr.method} ${xhr.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader && shouldAttachHeaders(handlerData.xhr.__sentry_xhr__.url)) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n\n        const dynamicSamplingContext = activeTransaction.getDynamicSamplingContext();\n        const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n\n        if (sentryBaggageHeader) {\n          // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n          // We can therefore simply set a baggage header without checking what was there before\n          // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n          handlerData.xhr.setRequestHeader(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n        }\n\n        activeTransaction.metadata.propagations += 1;\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n"],"names":["addInstrumentationHandler","stringMatchesSomePattern","hasTracingEnabled","getActiveTransaction","dynamicSamplingContextToSentryBaggageHeader","isInstanceOf","BAGGAGE_HEADER_NAME"],"mappings":"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"}