{"version":3,"file":"getLCP.js","sources":["../../../../../src/browser/web-vitals/getLCP.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { LCPMetric, ReportCallback, ReportOpts } from './types';\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\n/**\n * Calculates the [LCP](https://web.dev/lcp/) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called any time a new `largest-contentful-paint`\n * performance entry is dispatched, or once the final value of the metric has\n * been determined.\n */\nexport const onLCP = (onReport: ReportCallback, opts: ReportOpts = {}): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntries = (entries: LCPMetric['entries']): void => {\n    const lastEntry = entries[entries.length - 1] as LargestContentfulPaint;\n    if (lastEntry) {\n      // The startTime attribute returns the value of the renderTime if it is\n      // not 0, and the value of the loadTime otherwise. The activationStart\n      // reference is used because LCP should be relative to page activation\n      // rather than navigation start if the page was prerendered.\n      const value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n\n      // Only report if the page wasn't hidden prior to LCP.\n      if (value < visibilityWatcher.firstHiddenTime) {\n        metric.value = value;\n        metric.entries = [lastEntry];\n        report();\n      }\n    }\n  };\n\n  const po = observe('largest-contentful-paint', handleEntries);\n\n  if (po) {\n    report = bindReporter(onReport, metric, opts.reportAllChanges);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        handleEntries(po.takeRecords() as LCPMetric['entries']);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n  }\n};\n"],"names":["getVisibilityWatcher","initMetric","getActivationStart","observe","bindReporter","onHidden"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA,MAAA,iBAAA,GAAA,EAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,KAAA,GAAA,CAAA,QAAA,EAAA,IAAA,GAAA,EAAA,KAAA;AACA,EAAA,MAAA,iBAAA,GAAAA,yCAAA,EAAA,CAAA;AACA,EAAA,MAAA,MAAA,GAAAC,qBAAA,CAAA,KAAA,CAAA,CAAA;AACA,EAAA,IAAA,MAAA,CAAA;AACA;AACA,EAAA,MAAA,aAAA,GAAA,CAAA,OAAA,KAAA;AACA,IAAA,MAAA,SAAA,GAAA,OAAA,CAAA,OAAA,CAAA,MAAA,GAAA,CAAA,CAAA,EAAA;AACA,IAAA,IAAA,SAAA,EAAA;AACA;AACA;AACA;AACA;AACA,MAAA,MAAA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,SAAA,CAAA,SAAA,GAAAC,qCAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA,MAAA,IAAA,KAAA,GAAA,iBAAA,CAAA,eAAA,EAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,KAAA,CAAA;AACA,QAAA,MAAA,CAAA,OAAA,GAAA,CAAA,SAAA,CAAA,CAAA;AACA,QAAA,MAAA,EAAA,CAAA;AACA,OAAA;AACA,KAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,MAAA,EAAA,GAAAC,eAAA,CAAA,0BAAA,EAAA,aAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,EAAA,EAAA;AACA,IAAA,MAAA,GAAAC,yBAAA,CAAA,QAAA,EAAA,MAAA,EAAA,IAAA,CAAA,gBAAA,CAAA,CAAA;AACA;AACA,IAAA,MAAA,aAAA,GAAA,MAAA;AACA,MAAA,IAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,EAAA,CAAA,EAAA;AACA,QAAA,aAAA,CAAA,EAAA,CAAA,WAAA,EAAA,EAAA,CAAA;AACA,QAAA,EAAA,CAAA,UAAA,EAAA,CAAA;AACA,QAAA,iBAAA,CAAA,MAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA;AACA,QAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,OAAA;AACA,KAAA,CAAA;AACA;AACA;AACA;AACA;AACA,IAAA,CAAA,SAAA,EAAA,OAAA,CAAA,CAAA,OAAA,CAAA,IAAA,IAAA;AACA,MAAA,gBAAA,CAAA,IAAA,EAAA,aAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA;AACA,IAAAC,iBAAA,CAAA,aAAA,EAAA,IAAA,CAAA,CAAA;AACA,GAAA;AACA;;;;"}