{"version":3,"file":"getFID.js","sources":["../../../../../src/browser/web-vitals/getFID.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { FIDMetric, PerformanceEventTiming, ReportCallback, ReportOpts } from './types';\n\n/**\n * Calculates the [FID](https://web.dev/fid/) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nexport const onFID = (onReport: ReportCallback, opts: ReportOpts = {}): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  // eslint-disable-next-line prefer-const\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntry = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const handleEntries = (entries: FIDMetric['entries']): void => {\n    (entries as PerformanceEventTiming[]).forEach(handleEntry);\n  };\n\n  const po = observe('first-input', handleEntries);\n  report = bindReporter(onReport, metric, opts.reportAllChanges);\n\n  if (po) {\n    onHidden(() => {\n      handleEntries(po.takeRecords() as FIDMetric['entries']);\n      po.disconnect();\n    }, true);\n  }\n};\n"],"names":["getVisibilityWatcher","initMetric","observe","bindReporter","onHidden"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,KAAA,GAAA,CAAA,QAAA,EAAA,IAAA,GAAA,EAAA,KAAA;AACA,EAAA,MAAA,iBAAA,GAAAA,yCAAA,EAAA,CAAA;AACA,EAAA,MAAA,MAAA,GAAAC,qBAAA,CAAA,KAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,MAAA,CAAA;AACA;AACA,EAAA,MAAA,WAAA,GAAA,CAAA,KAAA,KAAA;AACA;AACA,IAAA,IAAA,KAAA,CAAA,SAAA,GAAA,iBAAA,CAAA,eAAA,EAAA;AACA,MAAA,MAAA,CAAA,KAAA,GAAA,KAAA,CAAA,eAAA,GAAA,KAAA,CAAA,SAAA,CAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,KAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,MAAA,aAAA,GAAA,CAAA,OAAA,KAAA;AACA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA,WAAA,CAAA,CAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,MAAA,EAAA,GAAAC,eAAA,CAAA,aAAA,EAAA,aAAA,CAAA,CAAA;AACA,EAAA,MAAA,GAAAC,yBAAA,CAAA,QAAA,EAAA,MAAA,EAAA,IAAA,CAAA,gBAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,EAAA,EAAA;AACA,IAAAC,iBAAA,CAAA,MAAA;AACA,MAAA,aAAA,CAAA,EAAA,CAAA,WAAA,EAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,UAAA,EAAA,CAAA;AACA,KAAA,EAAA,IAAA,CAAA,CAAA;AACA,GAAA;AACA;;;;"}